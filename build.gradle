buildscript {
    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/libs-snapshot' }
        maven { url 'https://dl.bintray.com/ilyaai/maven' }
    }
    dependencies {
        classpath 'ro.isdc.wro4j.gradle:wro4j-gradle-plugin:1.7.9-Beta1'
        classpath 'com.moowork.gradle:gradle-node-plugin:0.11'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE'
    }
}

repositories {
    jcenter()
}

group = 'ro.isdc.wro4j.gradle'
version = '1.7.9'

apply plugin: 'java'
apply plugin: 'wro4j'
apply plugin: 'com.moowork.node'
apply plugin: 'spring-boot'

node {
    download = true
}

ext {
    versionJQuery = '2.1.4'
    versionBootstrap = '3.3.4'
    versionJasmine = '2.3.4'
}

webResources {
    bundle ('core') {
        js 'js/**.js'
        preProcessor 'jsMin'
    }

    bundle ('libs') {
        js "webjars/jquery/$versionJQuery/jquery.min.js"
    }

    bundle ('theme-default') {
        css "webjars/bootstrap/$versionBootstrap/less/bootstrap.less"
        css 'themes/default/main.css'

        cssOverrideImport "variables.less", "../../../../themes/default/variables.less"
        preProcessor 'less4j', 'cssUrlRewriting'
    }

    assets {
        include 'themes/default/images/**'
    }

    testAssets {
        from (srcTestDir) {
            exclude '*SpecRunner.html'
            exclude '*.conf.js'
        }

        from (srcTestDir) {
            include '*SpecRunner.html'
            include '*.conf.js'

            expand([
                'srcMain': buildMainUri,
                'srcTest': buildTestUri,
                'webjarJasmine': "$buildTestUri/webjars/jasmine/$versionJasmine"
            ])
        }
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'

    webjars "org.webjars:jquery:$versionJQuery"
    webjars "org.webjars:bootstrap:$versionBootstrap"

    webjarsTest "org.webjars.bower:jasmine:$versionJasmine"
}

task cleanNodeModules(type: Delete)  {
    delete file('node_modules')
}

task installJasmine(type: NpmTask) {
    outputs.dir file("node_modules")

    npmCommand = ['install']
    args += ['karma', 'karma-jasmine@2_0', 'karma-phantomjs-launcher']
}

task runJasmine(type: NodeTask, dependsOn: [installJasmine, processWebTestResources]) {
    script = file("node_modules/karma/bin/karma")
    args = ['start', "${webResources.buildTestDir}/karma.conf.js"]
}

test.dependsOn runJasmine